{"version":3,"sources":["components/CardForm/CardForm.js","components/Card/Card.js","components/CardValidator.js","App.js","serviceWorker.js","index.js"],"names":["CardForm","cardMonth","cardYear","onUpdateState","cardNumberRef","cardHolderRef","cardCVC","cardDateRef","onCardInputFocus","children","useState","cardNumber","setCardNumber","currentYear","Date","getFullYear","monthsArr","Array","from","length","x","i","month","yearsArr","_x","handleFormChange","event","target","name","value","Form","className","Group","controlId","Label","type","options","creditCard","maxLength","ref","placeholder","onChange","trimRight","Control","Row","as","Col","defaultValue","disabled","map","val","index","key","onFocus","onBlur","Button","block","Card","cardHolder","isCardFlipped","CARDS","currentFocusedElm","onCardElementClick","useCardType","useMemo","re","number","Object","entries","card","pattern","RegExp","match","cardType","bgGradient","background","gradient","isFlipped","style","split","n","text","delay","overflow","inline","toString","substr","icon","initialState","CardValidator","state","setState","setCurrentFocusedElm","updateStateValues","useCallback","keyName","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","current","focus","cardElementsRef","onCardInputBlur","xs","md","span","offset","_event","inputName","library","add","fab","far","App","Container","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1f9319cf.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Col, Button } from 'react-bootstrap';\r\nimport Cleave from 'cleave.js/react';\r\n\r\nconst CardForm = ({\r\n\t                  cardMonth,\r\n\t                  cardYear,\r\n\t                  onUpdateState,\r\n\t                  cardNumberRef,\r\n\t                  cardHolderRef,\r\n\t                  cardDateRef,\r\n\t                  onCardInputFocus,\r\n\t                  cardCVC,\r\n\t                  children\r\n                  }) => {\r\n\r\n\tconst [cardNumber, setCardNumber] = useState('');\r\n\tconst currentYear = new Date().getFullYear();\r\n\tconst monthsArr = Array.from({ length: 12 }, (x, i) => {\r\n\t\tconst month = i + 1;\r\n\t\treturn month <= 9 ? '0' + month : month;\r\n\t});\r\n\tconst yearsArr = Array.from({ length: 9 }, (_x, i) => currentYear + i);\r\n\r\n\tconst onCardNumberChange = (event) => {\r\n\t\tlet { value, name } = event.target;\r\n\t\tlet cardNumber = value;\r\n\r\n\t\tsetCardNumber(cardNumber.trimRight());\r\n\t\tonUpdateState(name, cardNumber);\r\n\t};\r\n\r\n\tconst handleFormChange = (event) => {\r\n\t\tconst { name, value } = event.target;\r\n\t\tonUpdateState(name, value);\r\n\t};\r\n\r\n\tconst onCVCFocus = () => {\r\n\t\tonUpdateState('isCardFlipped', true);\r\n\t};\r\n\r\n\tconst onCVCBlur = () => {\r\n\t\tonUpdateState('isCardFlipped', false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Form className=\"form\">\r\n\t\t\t<div className=\"card-list\">{children}</div>\r\n\t\t\t<Form.Group controlId=\"formCardNumber\">\r\n\t\t\t\t<Form.Label>Card Number</Form.Label>\r\n\t\t\t\t<Cleave type=\"tel\"\r\n\t\t\t\t        className=\"form-control\"\r\n\t\t\t\t        value={cardNumber}\r\n\t\t\t\t        options={{creditCard: true}}\r\n\t\t\t\t        name=\"cardNumber\"\r\n\t\t\t\t        maxLength=\"19\"\r\n\t\t\t\t        ref={cardNumberRef}\r\n\t\t\t\t        placeholder=\"Enter card number\"\r\n\t\t\t\t        onChange={onCardNumberChange}/>\r\n\t\t\t</Form.Group>\r\n\t\t\t<Form.Group controlId=\"formCardHolder\">\r\n\t\t\t\t<Form.Label>Name on the card</Form.Label>\r\n\t\t\t\t<Form.Control type=\"text\"\r\n\t\t\t\t              name=\"cardHolder\"\r\n\t\t\t\t              ref={cardHolderRef}\r\n\t\t\t\t              placeholder=\"Name on the card\"\r\n\t\t\t\t              onChange={handleFormChange}/>\r\n\t\t\t</Form.Group>\r\n\t\t\t<Form.Row>\r\n\t\t\t\t<Form.Group as={Col} controlId=\"formCardMonth\">\r\n\t\t\t\t\t<Form.Label>Expiration Date</Form.Label>\r\n\t\t\t\t\t<Form.Control as=\"select\"\r\n\t\t\t\t\t              name=\"cardMonth\"\r\n\t\t\t\t\t              onChange={handleFormChange}\r\n\t\t\t\t\t              defaultValue={''}>\r\n\t\t\t\t\t\t<option value=\"\" disabled>\r\n\t\t\t\t\t\t\tMonth\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t{monthsArr.map((val, index) => (\r\n\t\t\t\t\t\t\t<option key={index} value={val}>\r\n\t\t\t\t\t\t\t\t{val}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Form.Control>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t\t<Form.Group as={Col} controlId=\"formCardYear\">\r\n\t\t\t\t\t<Form.Control as=\"select\"\r\n\t\t\t\t\t              name=\"cardYear\"\r\n\t\t\t\t\t              onChange={handleFormChange}\r\n\t\t\t\t\t              defaultValue={''}>\r\n\t\t\t\t\t\t<option value=\"\" disabled>\r\n\t\t\t\t\t\t\tYear\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t{yearsArr.map((val, index) => (\r\n\t\t\t\t\t\t\t<option key={index} value={val}>\r\n\t\t\t\t\t\t\t\t{val}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Form.Control>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t\t<Form.Group as={Col} controlId=\"formCardCvc\">\r\n\t\t\t\t\t<Form.Label>CVC / CVV</Form.Label>\r\n\t\t\t\t\t<Form.Control type=\"text\"\r\n\t\t\t\t\t              name=\"cardCVC\"\r\n\t\t\t\t\t              maxLength=\"4\"\r\n\t\t\t\t\t              placeholder=\"CVC / CVV\"\r\n\t\t\t\t\t              onChange={handleFormChange}\r\n\t\t\t\t\t              onFocus={onCVCFocus}\r\n\t\t\t\t\t              onBlur={onCVCBlur}\r\n\t\t\t\t\t              ref={cardCVC}/>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t</Form.Row>\r\n\t\t\t<Button className=\"btn-pay\" block>Pay</Button>\r\n\t\t</Form>\r\n\t)\r\n}\r\n\r\nexport  default CardForm;\r\n\r\n","import React, { useMemo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport gradient from 'random-gradient';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport ReactTextTransition from \"react-text-transition\";\r\n\r\nconst Card = ({\r\n\t              cardHolder,\r\n\t              cardNumber,\r\n\t              cardMonth,\r\n\t              cardYear,\r\n\t              cardCVC,\r\n\t              isCardFlipped,\r\n\t              currentFocusedElm,\r\n\t              onCardElementClick,\r\n\t              cardNumberRef,\r\n\t              cardHolderRef,\r\n\t              cardDateRef\r\n              }) => {\r\n\r\n\tconst CARDS = {\r\n\t\t'visa': '^4',\r\n\t\t'amex': '^(34|37)',\r\n\t\t'mastercard': '^5[1-5]',\r\n\t\t'discover': '^6011',\r\n\t\t//'unionpay': '^62',\r\n\t\t//'troy': '^9792',\r\n\t\t'diners-club': '^(30[0-5]|36)'\r\n\t};\r\n\r\n\tconst useCardType = useMemo(() => {\r\n\t\tconst cardType = (cardNumber) => {\r\n\t\t\tconst number = cardNumber;\r\n\t\t\tlet re;\r\n\t\t\tfor (const [card, pattern] of Object.entries(CARDS)) {\r\n\t\t\t\tre = new RegExp(pattern);\r\n\t\t\t\tif (number.match(re) != null) {\r\n\t\t\t\t\treturn card;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn 'credit-card';\r\n\t\t}\r\n\t\treturn cardType(cardNumber);\r\n\t}, [cardNumber, CARDS]);\r\n\r\n\tconst bgGradient = { background: gradient(`tzrhnfd-credit-card`) }\r\n\treturn (\r\n\t\t<div className=\"panel\">\r\n\t\t\t<ReactCardFlip isFlipped={isCardFlipped}>\r\n\t\t\t\t<div className=\"card card--front\" style={bgGradient}>\r\n\t\t\t\t\t<div className=\"card__number\">\r\n\t\t\t\t\t\t{cardNumber === '**** **** **** ****' ? cardNumber : cardNumber.split(\"\").map((n, i) => (\r\n\t\t\t\t\t\t\t<ReactTextTransition\r\n\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\ttext={n}\r\n\t\t\t\t\t\t\t\tdelay={i * 50}\r\n\t\t\t\t\t\t\t\tclassName=\"numbers\"\r\n\t\t\t\t\t\t\t\toverflow\r\n\t\t\t\t\t\t\t\tinline\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"card__expiry-date\">\r\n\t\t\t\t\t\t{ cardMonth ? cardMonth : 'MM' }/{\r\n\t\t\t\t\t\tcardYear ? cardYear.toString().substr(-2) : 'YY' }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"card__owner\">\r\n\t\t\t\t\t\t{ cardHolder }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"card__type\">\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tuseCardType === 'credit-card' ?\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={['far', 'credit-card']}/> :\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={['fab', `cc-${useCardType}`]}/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"card card--back\" style={bgGradient}>\r\n\t\t\t\t\t<div className=\"card__strip\" />\r\n\t\t\t\t\t<div className=\"card__back-content\">\r\n\t\t\t\t\t\t<div className=\"card__secret\">\r\n\t\t\t\t\t\t\t<div className=\"card__secret--last\">\r\n\t\t\t\t\t\t\t\t{cardCVC}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"card__type\">\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuseCardType === 'credit-card' ?\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={['far', 'credit-card']}/> :\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={['fab', `cc-${useCardType}`]}/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</ReactCardFlip>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default  Card;","import React, { useState, useRef, useCallback } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Form from './CardForm/CardForm';\r\nimport Card from './Card/Card';\r\n\r\nconst initialState = {\r\n\tcardNumber: '**** **** **** ****',\r\n\tcardHolder: 'FULL NAME',\r\n\tcardMonth: '',\r\n\tcardYear: '',\r\n\tcardCVC: '',\r\n\tisCardFlipped: false\r\n};\r\n\r\nconst CardValidator = () =>{\r\n\r\n\tconst [state, setState] = useState(initialState);\r\n\tconst [currentFocusedElm, setCurrentFocusedElm] = useState(null);\r\n\r\n\tconst updateStateValues = useCallback(\r\n\t\t(keyName, value) => {\r\n\t\t\tsetState({\r\n\t\t\t\t...state,\r\n\t\t\t\t[keyName]: value || initialState[keyName]\r\n\t\t\t});\r\n\t\t},\r\n\t\t[state]\r\n\t);\r\n\r\n\tlet formFieldsRefObj = {\r\n\t\tcardNumber: useRef(),\r\n\t\tcardHolder: useRef(),\r\n\t\tcardDate: useRef(),\r\n\t\tcardCVC: useRef()\r\n\t};\r\n\r\n\tlet focusFormFieldByKey = useCallback((key) => {\r\n\t\tformFieldsRefObj[key].current.focus();\r\n\t}, [formFieldsRefObj]);\r\n\r\n\r\n\tlet cardElementsRef = {\r\n\t\tcardNumber: useRef(),\r\n\t\tcardHolder: useRef(),\r\n\t\tcardDate: useRef()\r\n\t};\r\n\r\n\tlet onCardFormInputFocus = (_event, inputName) => {\r\n\t\tconst refByName = cardElementsRef[inputName];\r\n\t\tsetCurrentFocusedElm(refByName);\r\n\t};\r\n\r\n\tlet onCardInputBlur = useCallback(() => {\r\n\t\tsetCurrentFocusedElm(null);\r\n\t}, []);\r\n\r\n\r\n\treturn (\r\n\t\t<Row>\r\n\t\t\t<Col xs={12} md={{ span: 6, offset: 3 }}>\r\n\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<Form\r\n\t\t\t\t\t\tcardMonth={state.cardMonth}\r\n\t\t\t\t\t\tcardYear={state.cardYear}\r\n\t\t\t\t\t\tonUpdateState={updateStateValues}\r\n\t\t\t\t\t\tcardNumberRef={formFieldsRefObj.cardNumber}\r\n\t\t\t\t\t\tcardHolderRef={formFieldsRefObj.cardHolder}\r\n\t\t\t\t\t\tcardDateRef={formFieldsRefObj.cardDate}\r\n\t\t\t\t\t\tonCardInputFocus={onCardFormInputFocus}\r\n\t\t\t\t\t\tonCardInputBlur={onCardInputBlur}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tcardNumber={state.cardNumber}\r\n\t\t\t\t\t\t\tcardHolder={state.cardHolder}\r\n\t\t\t\t\t\t\tcardMonth={state.cardMonth}\r\n\t\t\t\t\t\t\tcardYear={state.cardYear}\r\n\t\t\t\t\t\t\tcardCVC={state.cardCVC}\r\n\t\t\t\t\t\t\tisCardFlipped={state.isCardFlipped}\r\n\t\t\t\t\t\t\tcurrentFocusedElm={currentFocusedElm}\r\n\t\t\t\t\t\t\tonCardElementClick={focusFormFieldByKey}\r\n\t\t\t\t\t\t\tcardNumberRef={cardElementsRef.cardNumber}\r\n\t\t\t\t\t\t\tcardHolderRef={cardElementsRef.cardHolder}\r\n\t\t\t\t\t\t\tcardDateRef={cardElementsRef.cardDate}/>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</div>\r\n\t\t\t</Col>\r\n\t\t</Row>\r\n\t);\r\n}\r\n\r\nexport default CardValidator;","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { far } from '@fortawesome/free-regular-svg-icons'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { Container } from 'react-bootstrap';\nimport CardValidator from './components/CardValidator';\nimport './App.scss';\n\nlibrary.add(fab, far);\n\nfunction App() {\n\treturn (\n\t\t<Container className=\"App\">\n\t\t\t<CardValidator/>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}